package com.marinho.controlles;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.marinho.domain.Produto;
import com.marinho.repositories.ProdutoRepository;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/produto") // This means URL's start with /demo (after Application path)
public class ProdutoController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private ProdutoRepository prepository;

	@GetMapping(path="/add") // Map ONLY GET Requests
	public @ResponseBody String addNewUser (@RequestParam String descricao
			, @RequestParam double valor) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		Produto p =  new Produto();
		p.setDescricao(descricao);
		p.setValor(valor);;
		
		prepository.save(p);
		return "Saved";
	}
	

	@GetMapping(path="/all")
	public @ResponseBody Iterable<Produto> getAllProdutos() {
		// This returns a JSON or XML with the users
		return prepository.findAll();	
	}
	@GetMapping(path="/allid")
	public @ResponseBody Optional<Produto> codigo(@RequestParam long id) {
		// This returns a JSON or XML with the users
		return prepository.findById(id);
	}
	@GetMapping(path="/delete")
	public @ResponseBody Iterable<Produto> deleteProduto(@RequestParam long id) {
		prepository.deleteById(id);
		return prepository.findAll();
		
	}
	@PostMapping(path="/update")
	public @ResponseBody String update(@RequestParam long id,@RequestParam String descricao
			, @RequestParam String valor){
			
		Produto record = prepository.findById(id).get();
			if(descricao !="") record.setDescricao(descricao);
			if(valor != "")record.setValor(Double.parseDouble(valor));
			
			prepository.save(record);
			
			return "Updated";
		
	}
	@GetMapping(path="/procurar")
	public @ResponseBody Produto p(@RequestParam int id,@RequestParam String descricao, @RequestParam int id2) {
		return prepository.findByDescricao(descricao);
	}
}