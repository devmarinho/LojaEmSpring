package com.marinho.controlles;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.marinho.domain.ItemNotaFiscal;
import com.marinho.domain.NotaFiscalVenda;
import com.marinho.repositories.ItemNotaFiscalRepository;
import com.marinho.repositories.ProdutoRepository;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/item") // This means URL's start with /demo (after Application path)
public class ItemNotaFiscalController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private ItemNotaFiscalRepository infrepository;
	@Autowired
	private ProdutoRepository prepository;

	@GetMapping(path="/add") // Map ONLY GET Requests
	public @ResponseBody String addNewNota (@RequestParam int quantidade,
			@RequestParam long id) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		ItemNotaFiscal n = new ItemNotaFiscal();
		n.setQuantidade(quantidade);
		n.setProduto(prepository.findById(id).get());
		n.valoItemNF();
		infrepository.save(n);
		return "Saved";
	}
	

	@GetMapping(path="/all")
	public @ResponseBody Iterable<ItemNotaFiscal> getAllUsers() {
		// This returns a JSON or XML with the users
		return infrepository.findAll();	
	}
	@GetMapping(path="/allid")
	public @ResponseBody Optional<ItemNotaFiscal> codigo(@RequestParam long id) {
		// This returns a JSON or XML with the users
		return infrepository.findById(id);
	}
	@GetMapping(path="/delete")
	public @ResponseBody Iterable<ItemNotaFiscal> deleteuser(@RequestParam long id) {
		infrepository.deleteById(id);
		return infrepository.findAll();
		
	}
	@PostMapping(path="/update")
	public @ResponseBody String update(@RequestParam long id,@RequestParam String produto
			, @RequestParam String quantidade){
			
		ItemNotaFiscal record = infrepository.findById(id).get();
			if(quantidade !="") record.setQuantidade(Integer.parseInt(quantidade));
			if(produto != "")record.setProduto(prepository.findById(Long.parseLong(produto)).get());
			
			infrepository.save(record);
			
			return "Updated";
	}
}