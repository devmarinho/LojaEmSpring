package com.marinho.controlles;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.marinho.domain.Cliente;
import com.marinho.domain.TipoCliente;
import com.marinho.repositories.ClienteRepository;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/cliente") // This means URL's start with /demo (after Application path)
public class ClienteController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private ClienteRepository crepository;

	@GetMapping(path="/add") // Map ONLY GET Requests
	public @ResponseBody String addNewUser (@RequestParam String name
			, @RequestParam String cnpfcnpj, @RequestParam String tipocliente) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		Cliente c = new Cliente();
		c.setNome(name);
		c.setCnpfcnpj(cnpfcnpj);
		if(tipocliente.equals("PESSOAFISICA")) {
			c.setTipocliente(TipoCliente.PESSOAFISICA);
		}
		else
			c.setTipocliente(TipoCliente.PESSOAJURIDICA);
		crepository.save(c);
		return "Saved";
	}
	

	@GetMapping(path="/all")
	public @ResponseBody Iterable<Cliente> getAllUsers() {
		// This returns a JSON or XML with the users
		return crepository.findAll();	
	}
	@GetMapping(path="allid")
	public @ResponseBody Optional<Cliente> codigo(@RequestParam long id) {
		// This returns a JSON or XML with the users
		return crepository.findById(id);
	}
	@GetMapping(path="delete")
	public @ResponseBody Iterable<Cliente> deleteuser(@RequestParam long id) {
		crepository.deleteById(id);
		return crepository.findAll();
		
	}
	@PostMapping(path="/update")
	public @ResponseBody String update(@RequestParam long id,@RequestParam String nome
			, @RequestParam String cnpfcnpj,@RequestParam String tipocliente){
		Cliente record = crepository.findById(id).get();
			if(nome !="") record.setNome(nome);
			if(cnpfcnpj != "")record.setCnpfcnpj(cnpfcnpj);
			if(tipocliente != "") {
				if(tipocliente.equals("PESSOAFISICA")) {
					record.setTipocliente(TipoCliente.PESSOAFISICA);
				}
				else
					record.setTipocliente(TipoCliente.PESSOAJURIDICA);
			}
			crepository.save(record);
			
			return "Updated";
	}
	@GetMapping(path="/procurar")
	public @ResponseBody Cliente lista (@RequestParam String nome){
		return crepository.findByName(nome);
		
	}
}